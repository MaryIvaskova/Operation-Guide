
from django.contrib.auth.models import AbstractUser, BaseUserManager
from django.db import models

# –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
class CustomUserManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ email")
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password=None, **extra_fields):
        extra_fields.setdefault("is_staff", True)
        extra_fields.setdefault("is_superuser", True)
        return self.create_user(email, password, **extra_fields)

# –ö–∞—Å—Ç–æ–º–Ω–∞ –º–æ–¥–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
class CustomUser(AbstractUser):
    email = models.EmailField(unique=True)
    username = None  # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    role = models.CharField(
        max_length=10,
        choices=[("admin", "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"), ("superuser", "–°—É–ø–µ—Ä–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á")],
        default="admin"
    )

    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = []

    objects = CustomUserManager()

    def __str__(self):
        return self.email

# üìå –Ü–Ω—à—ñ –º–æ–¥–µ–ª—ñ (–ü—Ä–∏—Å—Ç—Ä–æ—ó, –ó–∞—Å—Ç–æ—Å—É–Ω–∫–∏, –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —Ç–æ—â–æ)
class Device(models.Model):
    model = models.CharField(max_length=255)
    manufacturer = models.CharField(max_length=255)
    os = models.CharField(max_length=10, choices=[('iOS', 'iOS'), ('Android', 'Android')])

    def __str__(self):
        return f"{self.model} ({self.os})"

class App(models.Model):
    name = models.CharField(max_length=255)
    os = models.CharField(max_length=10, choices=[('iOS', 'iOS'), ('Android', 'Android')])

    def __str__(self):
        return self.name

class Instruction(models.Model):
    title = models.CharField(max_length=255)
    description = models.TextField()
    app = models.ForeignKey(App, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title

class InstructionStep(models.Model):
    instruction = models.ForeignKey(Instruction, on_delete=models.CASCADE)
    step_number = models.IntegerField()
    step_text = models.TextField()
    image_url = models.URLField(blank=True, null=True)

    class Meta:
        ordering = ['step_number']

class Feedback(models.Model):
    instruction = models.ForeignKey(Instruction, on_delete=models.CASCADE)
    comments = models.TextField()
    rating = models.IntegerField(choices=[(1, '‚≠ê'), (2, '‚≠ê‚≠ê'), (3, '‚≠ê‚≠ê‚≠ê'), (4, '‚≠ê‚≠ê‚≠ê‚≠ê'), (5, '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê')])
    date = models.DateTimeField(auto_now_add=True)

class Shortcut(models.Model):
    instruction = models.ForeignKey(Instruction, on_delete=models.CASCADE)
    label = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)

class AdBlock(models.Model):
    ad_text = models.TextField()
    image_url = models.URLField()
    target_url = models.URLField()
    display_message = models.CharField(
        max_length=255, default="–û—Å—å —Ç–∞–∫ –≤–∏–≥–ª—è–¥–∞—î —Ä–µ–∫–ª–∞–º–∞, –Ω–∞ –Ω–µ—ó –Ω–µ –≤–∞—Ä—Ç–æ –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏"
    )

class SupportLink(models.Model):
    platform = models.CharField(max_length=10, choices=[('Telegram', 'Telegram'), ('Viber', 'Viber')])
    link = models.URLField()